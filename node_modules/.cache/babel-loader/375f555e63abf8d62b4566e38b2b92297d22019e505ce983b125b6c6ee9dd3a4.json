{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import DueDateDropdown from \"../DueDateDropdown\";\n// import PriorityDropdown from \"../PriorityDropdown\";\n// import axios from \"axios\";\n// const EditTask = ({ closemodal, task, updateTask }) => {\n//   const [taskName, setTaskName] = useState(task.taskName);\n//   const [assignee, setAssignee] = useState(task.assignee);\n//   const [description, setDescription] = useState(task.description);\n//   const [selectedStartDate, setSelectedStartDate] = useState(\n//     task.selectedStartDate\n//   );\n//   const [selectedEndDate, setSelectedEndDate] = useState(task.selectedEndDate);\n//   const [userdata, setUserData] = useState([]);\n//   const swal = require(\"sweetalert2\");\n//   useEffect(() => {\n//     fetchUsers();\n//   }, []);\n//   const fetchUsers = async () => {\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:8080/api/user/\");\n//       if (!response.ok) {\n//         throw new Error(\"Failed to fetch users\");\n//       }\n//       const data = await response.json();\n//       setUserData(data);\n//     } catch (error) {\n//       console.error(\"Error:\", error);\n//     }\n//   };\n//   const handleUpdate = async () => {\n//     try {\n//       const response = await axios.put(\n//         `http://127.0.0.1:8080/api/task/${task.id}/`,\n//         {\n//           task_name: taskName,\n//           assignee: assignee,\n//           description: description,\n//           start_date: selectedStartDate,\n//           due_date: selectedEndDate,\n//         }\n//       );\n//       console.log(\"Task updated successfully\", response.data);\n//       updateTask(response.data);\n//     } catch (error) {\n//       console.log(\"Error:\", error);\n//     }\n//   };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.put(\n//         `http://127.0.0.1:8080/api/task/${task.id}/`,\n//         {\n//           task_name: taskName,\n//           assignee: assignee,\n//           description: description,\n//           start_date: selectedStartDate,\n//           due_date: selectedEndDate,\n//         }\n//       );\n//       console.log(\"Task updated successfully\", response.data);\n//       // Update task locally\n//       updateTask(response.data);\n//       swal.fire({\n//         title: \"Task updated successfully, Please reload the page\",\n//         icon: \"success\",\n//         toast: true,\n//         timer: 3000,\n//         position: \"top-right\",\n//         timerProgressBar: true,\n//         showConfirmButton: false,\n//       });\n//       closemodal(false);\n//     } catch (error) {\n//       console.log(\"Error:\", error);\n//     }\n//   };\n//   return (\n//     <div className=\"fixed inset-0 z-50 flex items-center justify-center backdrop-filter backdrop-blur-none bg-gray-900 bg-opacity-30\">\n//       <div className=\"relative p-4 w-full max-w-2xl h-full md:h-auto\">\n//         <div className=\"relative p-4 bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5\">\n//           <div className=\"flex justify-between items-center pb-4 mb-4 rounded-t border-b sm:mb-5 dark:border-gray-600\">\n//             <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n//               Edit Task\n//             </h3>\n//             <button\n//               type=\"button\"\n//               className=\"text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white\"\n//               onClick={() => closemodal(false)}\n//             >\n//               <svg\n//                 aria-hidden=\"true\"\n//                 className=\"w-5 h-5\"\n//                 fill=\"currentColor\"\n//                 viewBox=\"0 0 20 20\"\n//                 xmlns=\"http://www.w3.org/2000/svg\"\n//               >\n//                 <path\n//                   fillRule=\"evenodd\"\n//                   d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n//                   clipRule=\"evenodd\"\n//                 ></path>\n//               </svg>\n//               <span className=\"sr-only\">Close modal</span>\n//             </button>\n//           </div>\n//           <form onSubmit={handleSubmit}>\n//             <div className=\"grid gap-4 mb-4 sm:grid-cols-2\">\n//               <div>\n//                 <label\n//                   htmlFor=\"name\"\n//                   className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\"\n//                 >\n//                   Task Name\n//                 </label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"name\"\n//                   id=\"name\"\n//                   className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\n//                   placeholder=\"Type task name\"\n//                   required\n//                   value={taskName}\n//                   onChange={(e) => setTaskName(e.target.value)}\n//                 />\n//               </div>\n//               <div>\n//                 <label\n//                   htmlFor=\"due-date\"\n//                   className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\"\n//                 >\n//                   Due Date\n//                 </label>\n//                 <DueDateDropdown\n//                   selectedStartDate={selectedStartDate}\n//                   selectedEndDate={selectedEndDate}\n//                   setSelectedStartDate={setSelectedStartDate}\n//                   setSelectedEndDate={setSelectedEndDate}\n//                 />\n//               </div>\n//               <div>\n//                 <label\n//                   htmlFor=\"assignee\"\n//                   className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\"\n//                 >\n//                   Assignee\n//                 </label>\n//                 <select\n//                   type=\"text\"\n//                   name=\"assignee\"\n//                   id=\"assignee\"\n//                   className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\n//                   required\n//                   value={assignee}\n//                   onChange={(e) => setAssignee(e.target.value)}\n//                 >\n//                   {userdata.map((user) => (\n//                     <option key={user.id} value={user.id}>\n//                       {user.username}\n//                     </option>\n//                   ))}\n//                 </select>\n//               </div>\n//               <div className=\"sm:col-span-2\">\n//                 <label\n//                   htmlFor=\"description\"\n//                   className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\"\n//                 >\n//                   Description\n//                 </label>\n//                 <textarea\n//                   id=\"description\"\n//                   rows=\"4\"\n//                   className=\"block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\n//                   placeholder=\"Write task description here\"\n//                   value={description}\n//                   onChange={(e) => setDescription(e.target.value)}\n//                 ></textarea>\n//               </div>\n//             </div>\n//             <button\n//               type=\"submit\"\n//               className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\"\n//             >\n//               Update task\n//             </button>\n//             <button\n//               type=\"button\"\n//               onClick={() => closemodal(false)}\n//               className=\"focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900\"\n//             >\n//               Cancel\n//             </button>\n//           </form>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n// export default EditTask;\nimport React,{useEffect,useState}from\"react\";import DueDateDropdown from\"../DueDateDropdown\";import PriorityDropdown from\"../PriorityDropdown\";import axios from\"axios\";import swal from\"sweetalert2\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const EditTask=_ref=>{let{closemodal,task,updateTask}=_ref;const[taskName,setTaskName]=useState(task.taskName);const[assignee,setAssignee]=useState(task.assignee);const[description,setDescription]=useState(task.description);const[selectedStartDate,setSelectedStartDate]=useState(task.selectedStartDate);const[selectedEndDate,setSelectedEndDate]=useState(task.selectedEndDate);const[userdata,setUserData]=useState([]);useEffect(()=>{fetchUsers();},[]);const fetchUsers=async()=>{try{const response=await fetch(\"http://127.0.0.1:8080/api/user/\");if(!response.ok){throw new Error(\"Failed to fetch users\");}const data=await response.json();setUserData(data);}catch(error){console.error(\"Error:\",error);}};const handleSubmit=async e=>{e.preventDefault();try{const response=await axios.put(\"http://127.0.0.1:8080/api/task/\".concat(task.id,\"/\"),{task_name:taskName,assignee:assignee,description:description,start_date:selectedStartDate,due_date:selectedEndDate});console.log(\"Task updated successfully\",response.data);// Update task locally\nupdateTask(response.data);swal.fire({title:\"Task updated successfully, Please reload the page\",icon:\"success\",toast:true,timer:3000,position:\"top-right\",timerProgressBar:true,showConfirmButton:false});closemodal(false);}catch(error){console.log(\"Error:\",error);swal.fire({title:\"Failed to update task\",icon:\"error\",toast:true,timer:3000,position:\"top-right\",timerProgressBar:true,showConfirmButton:false});}};return/*#__PURE__*/_jsx(\"div\",{className:\"fixed inset-0 z-50 flex items-center justify-center backdrop-filter backdrop-blur-none bg-gray-900 bg-opacity-30\",children:/*#__PURE__*/_jsx(\"div\",{className:\"relative p-4 w-full max-w-2xl h-full md:h-auto\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"relative p-4 bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center pb-4 mb-4 rounded-t border-b sm:mb-5 dark:border-gray-600\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold text-gray-900 dark:text-white\",children:\"Edit Task\"}),/*#__PURE__*/_jsxs(\"button\",{type:\"button\",className:\"text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white\",onClick:()=>closemodal(false),children:[/*#__PURE__*/_jsx(\"svg\",{\"aria-hidden\":\"true\",className:\"w-5 h-5\",fill:\"currentColor\",viewBox:\"0 0 20 20\",xmlns:\"http://www.w3.org/2000/svg\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\",clipRule:\"evenodd\"})}),/*#__PURE__*/_jsx(\"span\",{className:\"sr-only\",children:\"Close modal\"})]})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"grid gap-4 mb-4 sm:grid-cols-2\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"name\",className:\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\",children:\"Task Name\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"name\",id:\"name\",className:\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\",placeholder:\"Type task name\",required:true,value:taskName,onChange:e=>setTaskName(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"due-date\",className:\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\",children:\"Due Date\"}),/*#__PURE__*/_jsx(DueDateDropdown,{selectedStartDate:selectedStartDate,selectedEndDate:selectedEndDate,setSelectedStartDate:setSelectedStartDate,setSelectedEndDate:setSelectedEndDate})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"assignee\",className:\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\",children:\"Assignee\"}),/*#__PURE__*/_jsx(\"select\",{type:\"text\",name:\"assignee\",id:\"assignee\",className:\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\",required:true,value:assignee,onChange:e=>setAssignee(e.target.value),children:userdata.map(user=>/*#__PURE__*/_jsx(\"option\",{value:user.id,children:user.username},user.id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"sm:col-span-2\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"description\",className:\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\",children:\"Description\"}),/*#__PURE__*/_jsx(\"textarea\",{id:\"description\",rows:\"4\",className:\"block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\",placeholder:\"Write task description here\",value:description,onChange:e=>setDescription(e.target.value)})]})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\",children:\"Update task\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:()=>closemodal(false),className:\"focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900\",children:\"Cancel\"})]})]})})});};export default EditTask;","map":{"version":3,"names":["React","useEffect","useState","DueDateDropdown","PriorityDropdown","axios","swal","jsx","_jsx","jsxs","_jsxs","EditTask","_ref","closemodal","task","updateTask","taskName","setTaskName","assignee","setAssignee","description","setDescription","selectedStartDate","setSelectedStartDate","selectedEndDate","setSelectedEndDate","userdata","setUserData","fetchUsers","response","fetch","ok","Error","data","json","error","console","handleSubmit","e","preventDefault","put","concat","id","task_name","start_date","due_date","log","fire","title","icon","toast","timer","position","timerProgressBar","showConfirmButton","className","children","type","onClick","fill","viewBox","xmlns","fillRule","d","clipRule","onSubmit","htmlFor","name","placeholder","required","value","onChange","target","map","user","username","rows"],"sources":["C:/Users/User/Documents/Work/TaskFlowWeb/src/components/MiniComponents.js/Modals/EditTask.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import DueDateDropdown from \"../DueDateDropdown\";\r\n// import PriorityDropdown from \"../PriorityDropdown\";\r\n// import axios from \"axios\";\r\n\r\n// const EditTask = ({ closemodal, task, updateTask }) => {\r\n//   const [taskName, setTaskName] = useState(task.taskName);\r\n//   const [assignee, setAssignee] = useState(task.assignee);\r\n//   const [description, setDescription] = useState(task.description);\r\n//   const [selectedStartDate, setSelectedStartDate] = useState(\r\n//     task.selectedStartDate\r\n//   );\r\n//   const [selectedEndDate, setSelectedEndDate] = useState(task.selectedEndDate);\r\n//   const [userdata, setUserData] = useState([]);\r\n//   const swal = require(\"sweetalert2\");\r\n\r\n//   useEffect(() => {\r\n//     fetchUsers();\r\n//   }, []);\r\n\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       const response = await fetch(\"http://127.0.0.1:8080/api/user/\");\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Failed to fetch users\");\r\n//       }\r\n//       const data = await response.json();\r\n//       setUserData(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleUpdate = async () => {\r\n//     try {\r\n//       const response = await axios.put(\r\n//         `http://127.0.0.1:8080/api/task/${task.id}/`,\r\n//         {\r\n//           task_name: taskName,\r\n//           assignee: assignee,\r\n//           description: description,\r\n//           start_date: selectedStartDate,\r\n//           due_date: selectedEndDate,\r\n//         }\r\n//       );\r\n//       console.log(\"Task updated successfully\", response.data);\r\n//       updateTask(response.data);\r\n//     } catch (error) {\r\n//       console.log(\"Error:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const response = await axios.put(\r\n//         `http://127.0.0.1:8080/api/task/${task.id}/`,\r\n//         {\r\n//           task_name: taskName,\r\n//           assignee: assignee,\r\n//           description: description,\r\n//           start_date: selectedStartDate,\r\n//           due_date: selectedEndDate,\r\n//         }\r\n//       );\r\n//       console.log(\"Task updated successfully\", response.data);\r\n//       // Update task locally\r\n//       updateTask(response.data);\r\n//       swal.fire({\r\n//         title: \"Task updated successfully, Please reload the page\",\r\n//         icon: \"success\",\r\n//         toast: true,\r\n//         timer: 3000,\r\n//         position: \"top-right\",\r\n//         timerProgressBar: true,\r\n//         showConfirmButton: false,\r\n//       });\r\n//       closemodal(false);\r\n//     } catch (error) {\r\n//       console.log(\"Error:\", error);\r\n//     }\r\n//   };\r\n//   return (\r\n//     <div className=\"fixed inset-0 z-50 flex items-center justify-center backdrop-filter backdrop-blur-none bg-gray-900 bg-opacity-30\">\r\n//       <div className=\"relative p-4 w-full max-w-2xl h-full md:h-auto\">\r\n//         <div className=\"relative p-4 bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5\">\r\n//           <div className=\"flex justify-between items-center pb-4 mb-4 rounded-t border-b sm:mb-5 dark:border-gray-600\">\r\n//             <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n//               Edit Task\r\n//             </h3>\r\n//             <button\r\n//               type=\"button\"\r\n//               className=\"text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white\"\r\n//               onClick={() => closemodal(false)}\r\n//             >\r\n//               <svg\r\n//                 aria-hidden=\"true\"\r\n//                 className=\"w-5 h-5\"\r\n//                 fill=\"currentColor\"\r\n//                 viewBox=\"0 0 20 20\"\r\n//                 xmlns=\"http://www.w3.org/2000/svg\"\r\n//               >\r\n//                 <path\r\n//                   fillRule=\"evenodd\"\r\n//                   d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\r\n//                   clipRule=\"evenodd\"\r\n//                 ></path>\r\n//               </svg>\r\n//               <span className=\"sr-only\">Close modal</span>\r\n//             </button>\r\n//           </div>\r\n//           <form onSubmit={handleSubmit}>\r\n//             <div className=\"grid gap-4 mb-4 sm:grid-cols-2\">\r\n//               <div>\r\n//                 <label\r\n//                   htmlFor=\"name\"\r\n//                   className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\"\r\n//                 >\r\n//                   Task Name\r\n//                 </label>\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   name=\"name\"\r\n//                   id=\"name\"\r\n//                   className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\r\n//                   placeholder=\"Type task name\"\r\n//                   required\r\n//                   value={taskName}\r\n//                   onChange={(e) => setTaskName(e.target.value)}\r\n//                 />\r\n//               </div>\r\n//               <div>\r\n//                 <label\r\n//                   htmlFor=\"due-date\"\r\n//                   className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\"\r\n//                 >\r\n//                   Due Date\r\n//                 </label>\r\n//                 <DueDateDropdown\r\n//                   selectedStartDate={selectedStartDate}\r\n//                   selectedEndDate={selectedEndDate}\r\n//                   setSelectedStartDate={setSelectedStartDate}\r\n//                   setSelectedEndDate={setSelectedEndDate}\r\n//                 />\r\n//               </div>\r\n//               <div>\r\n//                 <label\r\n//                   htmlFor=\"assignee\"\r\n//                   className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\"\r\n//                 >\r\n//                   Assignee\r\n//                 </label>\r\n//                 <select\r\n//                   type=\"text\"\r\n//                   name=\"assignee\"\r\n//                   id=\"assignee\"\r\n//                   className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\r\n//                   required\r\n//                   value={assignee}\r\n//                   onChange={(e) => setAssignee(e.target.value)}\r\n//                 >\r\n//                   {userdata.map((user) => (\r\n//                     <option key={user.id} value={user.id}>\r\n//                       {user.username}\r\n//                     </option>\r\n//                   ))}\r\n//                 </select>\r\n//               </div>\r\n//               <div className=\"sm:col-span-2\">\r\n//                 <label\r\n//                   htmlFor=\"description\"\r\n//                   className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\"\r\n//                 >\r\n//                   Description\r\n//                 </label>\r\n//                 <textarea\r\n//                   id=\"description\"\r\n//                   rows=\"4\"\r\n//                   className=\"block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\r\n//                   placeholder=\"Write task description here\"\r\n//                   value={description}\r\n//                   onChange={(e) => setDescription(e.target.value)}\r\n//                 ></textarea>\r\n//               </div>\r\n//             </div>\r\n//             <button\r\n//               type=\"submit\"\r\n//               className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\"\r\n//             >\r\n//               Update task\r\n//             </button>\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={() => closemodal(false)}\r\n//               className=\"focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900\"\r\n//             >\r\n//               Cancel\r\n//             </button>\r\n//           </form>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EditTask;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport DueDateDropdown from \"../DueDateDropdown\";\r\nimport PriorityDropdown from \"../PriorityDropdown\";\r\nimport axios from \"axios\";\r\nimport swal from \"sweetalert2\";\r\n\r\nconst EditTask = ({ closemodal, task, updateTask }) => {\r\n  const [taskName, setTaskName] = useState(task.taskName);\r\n  const [assignee, setAssignee] = useState(task.assignee);\r\n  const [description, setDescription] = useState(task.description);\r\n  const [selectedStartDate, setSelectedStartDate] = useState(\r\n    task.selectedStartDate\r\n  );\r\n  const [selectedEndDate, setSelectedEndDate] = useState(task.selectedEndDate);\r\n  const [userdata, setUserData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:8080/api/user/\");\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch users\");\r\n      }\r\n      const data = await response.json();\r\n      setUserData(data);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.put(\r\n        `http://127.0.0.1:8080/api/task/${task.id}/`,\r\n        {\r\n          task_name: taskName,\r\n          assignee: assignee,\r\n          description: description,\r\n          start_date: selectedStartDate,\r\n          due_date: selectedEndDate,\r\n        }\r\n      );\r\n      console.log(\"Task updated successfully\", response.data);\r\n      // Update task locally\r\n      updateTask(response.data);\r\n      swal.fire({\r\n        title: \"Task updated successfully, Please reload the page\",\r\n        icon: \"success\",\r\n        toast: true,\r\n        timer: 3000,\r\n        position: \"top-right\",\r\n        timerProgressBar: true,\r\n        showConfirmButton: false,\r\n      });\r\n      closemodal(false);\r\n    } catch (error) {\r\n      console.log(\"Error:\", error);\r\n      swal.fire({\r\n        title: \"Failed to update task\",\r\n        icon: \"error\",\r\n        toast: true,\r\n        timer: 3000,\r\n        position: \"top-right\",\r\n        timerProgressBar: true,\r\n        showConfirmButton: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center backdrop-filter backdrop-blur-none bg-gray-900 bg-opacity-30\">\r\n      <div className=\"relative p-4 w-full max-w-2xl h-full md:h-auto\">\r\n        <div className=\"relative p-4 bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5\">\r\n          <div className=\"flex justify-between items-center pb-4 mb-4 rounded-t border-b sm:mb-5 dark:border-gray-600\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n              Edit Task\r\n            </h3>\r\n            <button\r\n              type=\"button\"\r\n              className=\"text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white\"\r\n              onClick={() => closemodal(false)}\r\n            >\r\n              <svg\r\n                aria-hidden=\"true\"\r\n                className=\"w-5 h-5\"\r\n                fill=\"currentColor\"\r\n                viewBox=\"0 0 20 20\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n              >\r\n                <path\r\n                  fillRule=\"evenodd\"\r\n                  d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\r\n                  clipRule=\"evenodd\"\r\n                ></path>\r\n              </svg>\r\n              <span className=\"sr-only\">Close modal</span>\r\n            </button>\r\n          </div>\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"grid gap-4 mb-4 sm:grid-cols-2\">\r\n              <div>\r\n                <label\r\n                  htmlFor=\"name\"\r\n                  className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\"\r\n                >\r\n                  Task Name\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"name\"\r\n                  className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\r\n                  placeholder=\"Type task name\"\r\n                  required\r\n                  value={taskName}\r\n                  onChange={(e) => setTaskName(e.target.value)}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label\r\n                  htmlFor=\"due-date\"\r\n                  className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\"\r\n                >\r\n                  Due Date\r\n                </label>\r\n                <DueDateDropdown\r\n                  selectedStartDate={selectedStartDate}\r\n                  selectedEndDate={selectedEndDate}\r\n                  setSelectedStartDate={setSelectedStartDate}\r\n                  setSelectedEndDate={setSelectedEndDate}\r\n                />\r\n              </div>\r\n              <div>\r\n                <label\r\n                  htmlFor=\"assignee\"\r\n                  className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\"\r\n                >\r\n                  Assignee\r\n                </label>\r\n                <select\r\n                  type=\"text\"\r\n                  name=\"assignee\"\r\n                  id=\"assignee\"\r\n                  className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\r\n                  required\r\n                  value={assignee}\r\n                  onChange={(e) => setAssignee(e.target.value)}\r\n                >\r\n                  {userdata.map((user) => (\r\n                    <option key={user.id} value={user.id}>\r\n                      {user.username}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <div className=\"sm:col-span-2\">\r\n                <label\r\n                  htmlFor=\"description\"\r\n                  className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-white\"\r\n                >\r\n                  Description\r\n                </label>\r\n                <textarea\r\n                  id=\"description\"\r\n                  rows=\"4\"\r\n                  className=\"block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500\"\r\n                  placeholder=\"Write task description here\"\r\n                  value={description}\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\"\r\n            >\r\n              Update task\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => closemodal(false)}\r\n              className=\"focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900\"\r\n            >\r\n              Cancel\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditTask;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}