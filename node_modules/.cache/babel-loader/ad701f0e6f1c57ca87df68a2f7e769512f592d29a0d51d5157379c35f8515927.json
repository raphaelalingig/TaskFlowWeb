{"ast":null,"code":"import React from\"react\";import{useContext}from\"react\";import{Route,Redirect}from\"react-router-dom\";import AuthContext from\"../Auth/AuthContext\";import{jsx as _jsx}from\"react/jsx-runtime\";const PrivateRoute=_ref=>{let{component:Component,...rest}=_ref;const{user}=useContext(AuthContext);return/*#__PURE__*/_jsx(Route,{...rest,children:user?/*#__PURE__*/ // If user is authenticated, render the component associated with the route\n_jsx(Component,{...rest}):/*#__PURE__*/ // If user is not authenticated, redirect to the login page\n_jsx(Redirect,{to:\"/login\"})});};export default PrivateRoute;","map":{"version":3,"names":["React","useContext","Route","Redirect","AuthContext","jsx","_jsx","PrivateRoute","_ref","component","Component","rest","user","children","to"],"sources":["C:/Users/User/Documents/Work/TaskFlowWeb/src/components/utils/PrivateRoute.js"],"sourcesContent":["import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport AuthContext from \"../Auth/AuthContext\";\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Route {...rest}>\r\n      {user ? (\r\n        // If user is authenticated, render the component associated with the route\r\n        <Component {...rest} />\r\n      ) : (\r\n        // If user is not authenticated, redirect to the login page\r\n        <Redirect to=\"/login\" />\r\n      )}\r\n    </Route>\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,UAAU,KAAQ,OAAO,CAClC,OAASC,KAAK,CAAEC,QAAQ,KAAQ,kBAAkB,CAClD,MAAO,CAAAC,WAAW,KAAM,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9C,KAAM,CAAAC,YAAY,CAAGC,IAAA,EAAuC,IAAtC,CAAEC,SAAS,CAAEC,SAAS,CAAE,GAAGC,IAAK,CAAC,CAAAH,IAAA,CACrD,KAAM,CAAEI,IAAK,CAAC,CAAGX,UAAU,CAACG,WAAW,CAAC,CAExC,mBACEE,IAAA,CAACJ,KAAK,KAAKS,IAAI,CAAAE,QAAA,CACZD,IAAI,eACH;AACAN,IAAA,CAACI,SAAS,KAAKC,IAAI,CAAG,CAAC,eAEvB;AACAL,IAAA,CAACH,QAAQ,EAACW,EAAE,CAAC,QAAQ,CAAE,CACxB,CACI,CAAC,CAEZ,CAAC,CAED,cAAe,CAAAP,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}