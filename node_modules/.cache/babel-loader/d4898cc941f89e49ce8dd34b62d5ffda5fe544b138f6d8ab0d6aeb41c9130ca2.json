{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Children, cloneElement, isValidElement, useMemo } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep';\nimport { getTheme } from '../../theme-store';\nconst processChildren = (children, outline, pill) => {\n  return Children.map(children, (child, index) => {\n    if (isValidElement(child)) {\n      // Check if the child has nested children\n      if (child.props.children) {\n        // Recursively process nested children\n        return cloneElement(child, {\n          ...child.props,\n          children: processChildren(child.props.children, outline, pill),\n          positionInGroup: determinePosition(index, Children.count(children))\n        });\n      } else {\n        return cloneElement(child, {\n          outline,\n          pill,\n          positionInGroup: determinePosition(index, Children.count(children))\n        });\n      }\n    }\n    return child;\n  });\n};\nconst determinePosition = (index, totalChildren) => {\n  return index === 0 ? 'start' : index === totalChildren - 1 ? 'end' : 'middle';\n};\nexport const ButtonGroup = _ref => {\n  let {\n    children,\n    className,\n    outline,\n    pill,\n    theme: customTheme = {},\n    ...props\n  } = _ref;\n  const items = useMemo(() => processChildren(children, outline, pill), [children, outline, pill]);\n  const theme = mergeDeep(getTheme().buttonGroup, customTheme);\n  return _jsx(\"div\", {\n    className: twMerge(theme.base, className),\n    role: \"group\",\n    ...props,\n    children: items\n  });\n};\nButtonGroup.displayName = 'Button.Group';","map":{"version":3,"names":["jsx","_jsx","Children","cloneElement","isValidElement","useMemo","twMerge","mergeDeep","getTheme","processChildren","children","outline","pill","map","child","index","props","positionInGroup","determinePosition","count","totalChildren","ButtonGroup","_ref","className","theme","customTheme","items","buttonGroup","base","role","displayName"],"sources":["C:/Users/User/Documents/Work/TaskFlowWeb/node_modules/flowbite-react/lib/esm/components/Button/ButtonGroup.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Children, cloneElement, isValidElement, useMemo } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep';\nimport { getTheme } from '../../theme-store';\nconst processChildren = (children, outline, pill) => {\n    return Children.map(children, (child, index) => {\n        if (isValidElement(child)) {\n            // Check if the child has nested children\n            if (child.props.children) {\n                // Recursively process nested children\n                return cloneElement(child, {\n                    ...child.props,\n                    children: processChildren(child.props.children, outline, pill),\n                    positionInGroup: determinePosition(index, Children.count(children)),\n                });\n            }\n            else {\n                return cloneElement(child, {\n                    outline,\n                    pill,\n                    positionInGroup: determinePosition(index, Children.count(children)),\n                });\n            }\n        }\n        return child;\n    });\n};\nconst determinePosition = (index, totalChildren) => {\n    return index === 0 ? 'start' : index === totalChildren - 1 ? 'end' : 'middle';\n};\nexport const ButtonGroup = ({ children, className, outline, pill, theme: customTheme = {}, ...props }) => {\n    const items = useMemo(() => processChildren(children, outline, pill), [children, outline, pill]);\n    const theme = mergeDeep(getTheme().buttonGroup, customTheme);\n    return (_jsx(\"div\", { className: twMerge(theme.base, className), role: \"group\", ...props, children: items }));\n};\nButtonGroup.displayName = 'Button.Group';\n"],"mappings":"AAAA,SAASA,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,QAAQ,EAAEC,YAAY,EAAEC,cAAc,EAAEC,OAAO,QAAQ,OAAO;AACvE,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,MAAMC,eAAe,GAAGA,CAACC,QAAQ,EAAEC,OAAO,EAAEC,IAAI,KAAK;EACjD,OAAOV,QAAQ,CAACW,GAAG,CAACH,QAAQ,EAAE,CAACI,KAAK,EAAEC,KAAK,KAAK;IAC5C,IAAIX,cAAc,CAACU,KAAK,CAAC,EAAE;MACvB;MACA,IAAIA,KAAK,CAACE,KAAK,CAACN,QAAQ,EAAE;QACtB;QACA,OAAOP,YAAY,CAACW,KAAK,EAAE;UACvB,GAAGA,KAAK,CAACE,KAAK;UACdN,QAAQ,EAAED,eAAe,CAACK,KAAK,CAACE,KAAK,CAACN,QAAQ,EAAEC,OAAO,EAAEC,IAAI,CAAC;UAC9DK,eAAe,EAAEC,iBAAiB,CAACH,KAAK,EAAEb,QAAQ,CAACiB,KAAK,CAACT,QAAQ,CAAC;QACtE,CAAC,CAAC;MACN,CAAC,MACI;QACD,OAAOP,YAAY,CAACW,KAAK,EAAE;UACvBH,OAAO;UACPC,IAAI;UACJK,eAAe,EAAEC,iBAAiB,CAACH,KAAK,EAAEb,QAAQ,CAACiB,KAAK,CAACT,QAAQ,CAAC;QACtE,CAAC,CAAC;MACN;IACJ;IACA,OAAOI,KAAK;EAChB,CAAC,CAAC;AACN,CAAC;AACD,MAAMI,iBAAiB,GAAGA,CAACH,KAAK,EAAEK,aAAa,KAAK;EAChD,OAAOL,KAAK,KAAK,CAAC,GAAG,OAAO,GAAGA,KAAK,KAAKK,aAAa,GAAG,CAAC,GAAG,KAAK,GAAG,QAAQ;AACjF,CAAC;AACD,OAAO,MAAMC,WAAW,GAAGC,IAAA,IAA+E;EAAA,IAA9E;IAAEZ,QAAQ;IAAEa,SAAS;IAAEZ,OAAO;IAAEC,IAAI;IAAEY,KAAK,EAAEC,WAAW,GAAG,CAAC,CAAC;IAAE,GAAGT;EAAM,CAAC,GAAAM,IAAA;EACjG,MAAMI,KAAK,GAAGrB,OAAO,CAAC,MAAMI,eAAe,CAACC,QAAQ,EAAEC,OAAO,EAAEC,IAAI,CAAC,EAAE,CAACF,QAAQ,EAAEC,OAAO,EAAEC,IAAI,CAAC,CAAC;EAChG,MAAMY,KAAK,GAAGjB,SAAS,CAACC,QAAQ,CAAC,CAAC,CAACmB,WAAW,EAAEF,WAAW,CAAC;EAC5D,OAAQxB,IAAI,CAAC,KAAK,EAAE;IAAEsB,SAAS,EAAEjB,OAAO,CAACkB,KAAK,CAACI,IAAI,EAAEL,SAAS,CAAC;IAAEM,IAAI,EAAE,OAAO;IAAE,GAAGb,KAAK;IAAEN,QAAQ,EAAEgB;EAAM,CAAC,CAAC;AAChH,CAAC;AACDL,WAAW,CAACS,WAAW,GAAG,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}